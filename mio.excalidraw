{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "type": "text",
      "version": 543,
      "versionNonce": 297419388,
      "isDeleted": false,
      "id": "iDPxAy8GI7PEljzAyegdm",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": -1235.5,
      "y": -759.5,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 1047,
      "height": 101,
      "seed": 1833201007,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElementIds": [],
      "fontSize": 16,
      "fontFamily": 3,
      "text": "在 src/event/source.rs 中定义了 Source trait，要求了三个方法 \n    - fn register(&mut self, registry: &Registry, token: Token, interests: Interest) -> io::Result<()>;\n    - fn reregister(&mut self, registry: &Registry, token: Token, interests: Interest) -> io::Result<()>;\n    - fn deregister(&mut self, registry: &Registry) -> io::Result<()>;\n实现了 Source trait 的类型可以被注册到 Registry 中: registry 通过 register 方法调用 Source trait 的实例的 register 方法",
      "baseline": 97,
      "textAlign": "left",
      "verticalAlign": "top"
    },
    {
      "type": "text",
      "version": 543,
      "versionNonce": 2128815428,
      "isDeleted": false,
      "id": "qG3K0_Scfvb3kGTljT9RO",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": -1247.75,
      "y": 1156.0833333333335,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 975,
      "height": 122,
      "seed": 1115621569,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElementIds": [],
      "fontSize": 16,
      "fontFamily": 3,
      "text": "在 src/sys/unix/net.rs 中定义了各种 socket 相关的函数\n    - pub(crate) fn new_socket(domain: libc::c_int, socket_type: libc::c_int) -> io::Result<libc::c_int>\n    - ...\n在 src/sys/unix/tcp.rs 中定义了 pub type TcpSocket = libc::c_int;\n \n在 src/net/tcp/socket.rs 中定义了 pub struct TcpSocket { sys: sys::tcp::TcpSocket }",
      "baseline": 118,
      "textAlign": "left",
      "verticalAlign": "top"
    },
    {
      "type": "text",
      "version": 728,
      "versionNonce": 840025596,
      "isDeleted": false,
      "id": "nYQMDoa0aNvIE1RxN4426",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": -1234,
      "y": 298.75,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 1003,
      "height": 437,
      "seed": 1138352207,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElementIds": [],
      "fontSize": 16,
      "fontFamily": 3,
      "text": "在 src/io_source.rs 中定义了 \npub struct IoSource<T> {\n    state: IoSourceState, // `epoll` does't need to hold any user space state. so it's just an empty struct\n    inner: T,\n    selector_id: SelectorId,\n} \n\nIoSource 的作用是 Adapter for a [`RawFd`] or [`RawSocket`] providing an [`event::Source`] implementation. \n所以这里我们要求 T: AsRawFd 或 T: AsRawSocket\nimpl<T> event::Source for IoSource<T> where T: AsRawFd {\n    fn register(&mut self, registry: &Registry, token: Token, interests: Interest, ) -> io::Result<()> {\n        // 将 self.selector_id 与将要注册的 registry 关联\n        self.selector_id.associate(registry)?;\n        // poll::selector(registry) 返回 registry 包裹的 selector\n        poll::selector(registry).register(self.inner.as_raw_fd(), token, interests)\n    }\n\n    // ...\n}\n\n\n",
      "baseline": 433,
      "textAlign": "left",
      "verticalAlign": "top"
    },
    {
      "id": "x7RkerMtMIg9gZljTsVIC",
      "type": "text",
      "x": -1239,
      "y": -431.5,
      "width": 827,
      "height": 227,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 853279612,
      "version": 1297,
      "versionNonce": 1601210820,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "我们以官方 examples/tcp_server.rs 流程为例看 mio 的实现\n    1. 通过 Poll::new() 得到一个 Poll instance\n    2. 通过 mio::net::TcpListener::bind(addr) 得到 一个 mio::net::TcpListener instance\n    3. const SERVER: Token = Token(0); \n       通过 poll.registry().register(&server, SERVER, Interests::READABLE) 注册感兴趣的事件\n    4. let mut events = Events::with_capacity(128);\n       通过 poll.poll(&mut events, None) 获取 ready 的事件到 events 中\n           （本质上即是调用 libc::epoll_wait\n    5. 遍历 events 来处理每个就绪的事件，根据从 events[i] 中得到的 Token to identify event src\n    ...\n    此后的行为即是按照一般的 epoll 代码逻辑编写，不在赘述",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 223
    },
    {
      "id": "eAKVZBNBn2bxRU4SeZG2-",
      "type": "text",
      "x": -132.35714285714286,
      "y": -445.2857142857142,
      "width": 919,
      "height": 587,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 232193404,
      "version": 461,
      "versionNonce": 2006324932,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "在 src/poll.rs 中定义了\npub struct Poll {\n    registry: Registry,\n}\n\nimpl Poll {\n    pub fn poll(&mut self, events: &mut Events, timeout: Option<Duration>) -> io::Result<()> {\n        self.registry.selector.select(events.sys(), timeout)\n    }\n}\n\npub struct Registry {\n    selector: sys::Selector,\n}\n\n\nimpl Registry {\n    pub fn register<S>(&self, source: &mut S, token: Token, interests: Interest) -> io::Result<()>\n    where\n        S: event::Source + ?Sized,\n    {\n        trace!(\n            \"registering event source with poller: token={:?}, interests={:?}\",\n            token,\n            interests\n        );\n        source.register(self, token, interests)\n    }\n}\n",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 583
    },
    {
      "id": "-rgQd1a0b6bv2p0Y3PFSi",
      "type": "text",
      "x": -133.78571428571422,
      "y": 295,
      "width": 801,
      "height": 700,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1401413956,
      "version": 608,
      "versionNonce": 1038585468,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "在 src/sys/unix/selector/epoll.rs 中定义了\npub struct Selector {\n    id: usize, // unique id for use as `SelectorId`.\n    ep: RawFd,\n    has_waker: AtomicBool,\n} \n\nSelector::new 通过系统调用 epoll_create1 创建一个 epoll 对象 ep，并包含在结构体中\n\nimpl Selector {\n    pub fn new() -> io::Result<Selector> {\n        syscall!(epoll_create1(flag)).map(|ep| Selector {\n            id: NEXT_ID.fetch_add(1, Ordering::Relaxed),\n            ep,\n            has_waker: AtomicBool::new(false),\n        })\n    }\n\n    pub fn register(&self, fd: RawFd, token: Token, interests: Interest) -> io::Result<()> {\n        let mut event = libc::epoll_event {\n            events: interests_to_epoll(interests),\n            u64: usize::from(token) as u64,\n        };\n\n        syscall!(epoll_ctl(self.ep, libc::EPOLL_CTL_ADD, fd, &mut event)).map(|_| ())\n    }\n\n    pub fn select(&self, events: &mut Events, timeout: Option<Duration>) -> io::Result<()> {\n        let timeout = timeout\n            .map(|to| cmp::min(to.as_millis(), libc::c_int::max_value() as u128) as libc::c_int)\n            .unwrap_or(-1);\n\n        events.clear();\n        syscall!(epoll_wait(self.ep, events.as_mut_ptr(), events.capacity() as i32, timeout))\n        .map(|n_events| {\n            // This is safe because `epoll_wait` ensures that `n_events` are\n            // assigned.\n            unsafe { events.set_len(n_events as usize) };\n        })\n    }\n}",
      "fontSize": 14.238993710691815,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 697
    },
    {
      "id": "MUKgC4CEUP4KCiIs9uADK",
      "type": "text",
      "x": -1236.5,
      "y": -105.5,
      "width": 966,
      "height": 197,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1932186820,
      "version": 262,
      "versionNonce": 912921924,
      "isDeleted": false,
      "boundElementIds": [
        "3gOZP_Z2kOuQIQWTWyw_g"
      ],
      "text": "在 src/net/tcp/listener.rs 中定义了 \npub struct TcpListener {\n    inner: IoSource<net::TcpListener>,\n}\n\nimpl event::Source for TcpListener {\n    fn register( &mut self, registry: &Registry, token: Token, interests: Interest) -> io::Result<()> {\n        self.inner.register(registry, token, interests)\n    }\n}",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 193
    },
    {
      "id": "JnChJ9toPozXUwwKKJq5Q",
      "type": "rectangle",
      "x": -1257.0277777777774,
      "y": -444.611111111111,
      "width": 993,
      "height": 268.5,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 763876036,
      "version": 494,
      "versionNonce": 797414980,
      "isDeleted": false,
      "boundElementIds": null
    },
    {
      "id": "ln6Zsk8-jE637jaqeYzk7",
      "type": "rectangle",
      "x": -1256.0277777777774,
      "y": -124.11111111111097,
      "width": 1003.5,
      "height": 261,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 378066428,
      "version": 259,
      "versionNonce": 1897318524,
      "isDeleted": false,
      "boundElementIds": [
        "McL5VgCnU-s4KS5OGcuoB"
      ]
    },
    {
      "id": "-6nCJJbttYiYPMyGEhR3e",
      "type": "rectangle",
      "x": -1246.5277777777774,
      "y": 285.888888888889,
      "width": 1033.5,
      "height": 496,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 909118276,
      "version": 157,
      "versionNonce": 1230347644,
      "isDeleted": false,
      "boundElementIds": [
        "rmoWumDaxuURUQbCa6y85"
      ]
    },
    {
      "id": "LVAWkKL82NmsxJ8qQ-cwP",
      "type": "text",
      "x": -1977.5277777777778,
      "y": 303.8531746031749,
      "width": 694,
      "height": 590,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 2050538748,
      "version": 348,
      "versionNonce": 1914899068,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "（我不知道 SelectorId 有什么作用，看起来只是在运行时检查是否被注册到了多个 Selector\n\n在 src/io_source.rs 中定义了\nstruct SelectorId {\n    id: AtomicUsize,\n}\n\nimpl SelectorId {\n    /// Value of `id` if `SelectorId` is not associated with any\n    /// `sys::Selector`. Valid selector ids start at 1.\n    const UNASSOCIATED: usize = 0;\n\n    /// Associate an I/O source with `registry`, returning an error if its\n    /// already registered.\n    fn associate(&self, registry: &Registry) -> io::Result<()> {\n        // poll::selector(&registry) 返回 registry 包裹的 selector\n        let registry_id = poll::selector(&registry).id();\n        let previous_id = self.id.swap(registry_id, Ordering::AcqRel);\n\n        if previous_id == Self::UNASSOCIATED {\n            Ok(())\n        } else {\n            Err(io::Error::new(\n                io::ErrorKind::AlreadyExists,\n                \"I/O source already registered with a `Registry`\",\n            ))\n        }\n    }\n}\n",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 586
    },
    {
      "id": "Xc9MmwYmDkhxetBg7UeLx",
      "type": "text",
      "x": -2363.527777777778,
      "y": -433.1468253968251,
      "width": 1063,
      "height": 122,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 19593980,
      "version": 629,
      "versionNonce": 752526276,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "在 src/token.rs 中定义了 pub struct Token(pub usize);\nToken 被用来跟踪 which socket generated the event:\n    在进行系统调用 epoll_ctl(epoll_fd, EPOLL_CTL_ADD, req->client_fd, &event) 时，event.data.u64 被设置为我们的 Token \n    \n    \n",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 118
    },
    {
      "id": "dx0btMbXKSzmOheYz2GFo",
      "type": "text",
      "x": 855.9722222222222,
      "y": -457.6468253968251,
      "width": 390,
      "height": 258,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 2043837892,
      "version": 160,
      "versionNonce": 772332484,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "在 src/event/events.rs 中定义了 \npub struct Events {\n    inner: sys::Events,\n}\n\n在 src/event/event.rs 中定义了\npub struct Event {\n    inner: sys::Event,\n} \n\n在 src/sys/unix/selector/epoll.rs 中定义了 \npub type Event = libc::epoll_event;\npub type Events = Vec<Event>;",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 254
    },
    {
      "id": "tShKIjgO7JIW7WGcXFM-E",
      "type": "text",
      "x": -2360.027777777778,
      "y": -316.1468253968251,
      "width": 441,
      "height": 215,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1514728956,
      "version": 106,
      "versionNonce": 1446070340,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "typedef union epoll_data {\n    void* ptr;\n    int fd;\n    uint32_t u32;\n    uint64_t u64;\n} epoll_data_t;\n\nstruct epoll_event {\n    uint32_t events; /* Epoll events */\n    epoll_data_t data; /* User data variable */\n};",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 211
    },
    {
      "id": "0t7lmok4FTLMdd_8Vdvhj",
      "type": "rectangle",
      "x": -1992.0277777777778,
      "y": 286.3531746031747,
      "width": 721,
      "height": 610,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 930079428,
      "version": 75,
      "versionNonce": 267360324,
      "isDeleted": false,
      "boundElementIds": null
    },
    {
      "id": "mhsjZLETG6IEEO33Xsa0Z",
      "type": "rectangle",
      "x": -1258.0277777777778,
      "y": -776.6468253968253,
      "width": 1089,
      "height": 141,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1479203268,
      "version": 117,
      "versionNonce": 803091268,
      "isDeleted": false,
      "boundElementIds": null
    },
    {
      "id": "8e1earxtNKrlfEsW97PCQ",
      "type": "rectangle",
      "x": -164.02777777777783,
      "y": -472.6468253968253,
      "width": 974,
      "height": 622,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 14907460,
      "version": 69,
      "versionNonce": 317400900,
      "isDeleted": false,
      "boundElementIds": null
    },
    {
      "id": "brqM8RrO8WqbWpIHDkLUr",
      "type": "rectangle",
      "x": 848.9722222222222,
      "y": -470.6468253968253,
      "width": 412,
      "height": 292,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1110499068,
      "version": 40,
      "versionNonce": 364272964,
      "isDeleted": false,
      "boundElementIds": null
    },
    {
      "id": "Obhn-bM0HSLy5DtOAJzdX",
      "type": "rectangle",
      "x": -144.02777777777783,
      "y": 286.3531746031747,
      "width": 843,
      "height": 725,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 218240196,
      "version": 56,
      "versionNonce": 716076796,
      "isDeleted": false,
      "boundElementIds": null
    },
    {
      "id": "if4KFFSrg9QoYjGoZIenA",
      "type": "rectangle",
      "x": -2379.027777777778,
      "y": -445.6468253968253,
      "width": 1081,
      "height": 360,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1961336772,
      "version": 91,
      "versionNonce": 2055254340,
      "isDeleted": false,
      "boundElementIds": null
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  }
}